/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*******************************************!*\
  !*** ./resources/js/shadcn-components.js ***!
  \*******************************************/
/**
 * ShadCN Components
 * 
 * This file contains JavaScript implementations for ShadCN UI components.
 * It includes table, filter, and other UI component functionality.
 */
// Initialize all ShadCN components when DOM is loaded
document.addEventListener('DOMContentLoaded', function () {
  initializeShadcnTables();
  initializeShadcnFilters();
  initializeShadcnDropdowns();
  initializeShadcnModals();
});
/**
 * Table Component
 */

function initializeShadcnTables() {
  var tables = document.querySelectorAll('.shadcn-table');
  tables.forEach(function (table) {
    // Add sorting functionality
    var sortableHeaders = table.querySelectorAll('th[data-sortable]');
    sortableHeaders.forEach(function (header) {
      header.addEventListener('click', function () {
        var column = header.getAttribute('data-column');
        var currentDirection = header.getAttribute('data-direction') || 'asc';
        var newDirection = currentDirection === 'asc' ? 'desc' : 'asc'; // Reset all headers

        sortableHeaders.forEach(function (h) {
          h.setAttribute('data-direction', '');
          h.classList.remove('sorting-asc', 'sorting-desc');
        }); // Set new sort direction

        header.setAttribute('data-direction', newDirection);
        header.classList.add(newDirection === 'asc' ? 'sorting-asc' : 'sorting-desc'); // Sort the table

        sortTable(table, column, newDirection);
      });
    }); // Add row selection functionality

    var selectableRows = table.querySelectorAll('tbody tr[data-selectable]');
    selectableRows.forEach(function (row) {
      row.addEventListener('click', function () {
        if (row.classList.contains('selected')) {
          row.classList.remove('selected');
        } else {
          row.classList.add('selected');
        }
      });
    });
  });
}

function sortTable(table, column, direction) {
  var tbody = table.querySelector('tbody');
  var rows = Array.from(tbody.querySelectorAll('tr')); // Sort rows

  rows.sort(function (a, b) {
    var aValue = a.querySelector("td[data-column=\"".concat(column, "\"]")).textContent.trim();
    var bValue = b.querySelector("td[data-column=\"".concat(column, "\"]")).textContent.trim();

    if (direction === 'asc') {
      return aValue.localeCompare(bValue);
    } else {
      return bValue.localeCompare(aValue);
    }
  }); // Reorder rows

  rows.forEach(function (row) {
    tbody.appendChild(row);
  });
}
/**
 * Filter Component
 */


function initializeShadcnFilters() {
  var filters = document.querySelectorAll('.shadcn-filter');
  filters.forEach(function (filter) {
    // Get filter elements
    var toggleButton = filter.querySelector('.shadcn-filter-toggle');
    var filterBody = filter.querySelector('.shadcn-filter-body');
    var applyButton = filter.querySelector('.shadcn-filter-button-primary');
    var resetButton = filter.querySelector('.shadcn-filter-button-secondary');
    var filterInputs = filter.querySelectorAll('select, input');
    var filterBadge = filter.querySelector('.shadcn-filter-badge'); // Get filter ID for localStorage

    var filterId = filter.getAttribute('data-filter-id') || 'default-filter';
    var storageKey = "shadcn-filter-".concat(filterId);
    var collapseKey = "shadcn-filter-collapse-".concat(filterId); // Load saved filter state

    loadFilterState(filterInputs, storageKey); // Load collapse state

    var isCollapsed = localStorage.getItem(collapseKey) === 'true';

    if (isCollapsed) {
      filterBody.style.display = 'none';
      toggleButton.setAttribute('aria-expanded', 'false');
    } // Update filter badge


    updateFilterBadge(filterInputs, filterBadge); // Toggle filter visibility

    if (toggleButton) {
      toggleButton.addEventListener('click', function () {
        var isExpanded = toggleButton.getAttribute('aria-expanded') === 'true';
        toggleButton.setAttribute('aria-expanded', !isExpanded);

        if (isExpanded) {
          filterBody.style.display = 'none';
          localStorage.setItem(collapseKey, 'true');
        } else {
          filterBody.style.display = 'grid';
          localStorage.setItem(collapseKey, 'false');
        }
      });
    } // Apply filters


    if (applyButton) {
      applyButton.addEventListener('click', function () {
        saveFilterState(filterInputs, storageKey);
        updateFilterBadge(filterInputs, filterBadge); // Trigger filter event

        var filterEvent = new CustomEvent('shadcn-filter-applied', {
          detail: {
            filterId: filterId,
            values: getFilterValues(filterInputs)
          }
        });
        document.dispatchEvent(filterEvent);
      });
    } // Reset filters


    if (resetButton) {
      resetButton.addEventListener('click', function () {
        resetFilters(filterInputs);
        localStorage.removeItem(storageKey);
        updateFilterBadge(filterInputs, filterBadge); // Trigger filter event

        var filterEvent = new CustomEvent('shadcn-filter-reset', {
          detail: {
            filterId: filterId
          }
        });
        document.dispatchEvent(filterEvent);
      });
    } // Auto-apply filters if enabled


    var autoApply = filter.getAttribute('data-auto-apply') === 'true';

    if (autoApply) {
      filterInputs.forEach(function (input) {
        input.addEventListener('change', function () {
          saveFilterState(filterInputs, storageKey);
          updateFilterBadge(filterInputs, filterBadge); // Trigger filter event

          var filterEvent = new CustomEvent('shadcn-filter-applied', {
            detail: {
              filterId: filterId,
              values: getFilterValues(filterInputs)
            }
          });
          document.dispatchEvent(filterEvent);
        });
      });
    }
  });
}

function getFilterValues(inputs) {
  var values = {};
  inputs.forEach(function (input) {
    var name = input.getAttribute('name');

    if (name) {
      values[name] = input.value;
    }
  });
  return values;
}

function saveFilterState(inputs, storageKey) {
  var state = {};
  inputs.forEach(function (input) {
    var name = input.getAttribute('name');

    if (name) {
      state[name] = input.value;
    }
  });
  localStorage.setItem(storageKey, JSON.stringify(state));
}

function loadFilterState(inputs, storageKey) {
  var savedState = localStorage.getItem(storageKey);

  if (savedState) {
    var state = JSON.parse(savedState);
    inputs.forEach(function (input) {
      var name = input.getAttribute('name');

      if (name && state[name] !== undefined) {
        input.value = state[name];
      }
    });
  }
}

function resetFilters(inputs) {
  inputs.forEach(function (input) {
    if (input.tagName === 'SELECT') {
      input.selectedIndex = 0;
    } else if (input.type === 'checkbox' || input.type === 'radio') {
      input.checked = false;
    } else {
      input.value = '';
    }
  });
}

function updateFilterBadge(inputs, badge) {
  if (!badge) return;
  var activeFilters = 0;
  inputs.forEach(function (input) {
    if (input.tagName === 'SELECT' && input.selectedIndex > 0) {
      activeFilters++;
    } else if ((input.type === 'checkbox' || input.type === 'radio') && input.checked) {
      activeFilters++;
    } else if (input.type === 'text' && input.value.trim() !== '') {
      activeFilters++;
    }
  });
  badge.textContent = activeFilters;
  badge.style.display = activeFilters > 0 ? 'inline-flex' : 'none';
}
/**
 * Dropdown Component
 */


function initializeShadcnDropdowns() {
  var dropdowns = document.querySelectorAll('.shadcn-dropdown');
  dropdowns.forEach(function (dropdown) {
    var trigger = dropdown.querySelector('.shadcn-dropdown-trigger');
    var content = dropdown.querySelector('.shadcn-dropdown-content');

    if (trigger && content) {
      trigger.addEventListener('click', function (e) {
        e.stopPropagation();
        content.classList.toggle('open');
      });
      document.addEventListener('click', function (e) {
        if (!dropdown.contains(e.target)) {
          content.classList.remove('open');
        }
      });
    }
  });
}
/**
 * Modal Component
 */


function initializeShadcnModals() {
  var modalTriggers = document.querySelectorAll('[data-modal-trigger]');
  modalTriggers.forEach(function (trigger) {
    var modalId = trigger.getAttribute('data-modal-trigger');
    var modal = document.getElementById(modalId);

    if (modal) {
      var closeButtons = modal.querySelectorAll('[data-modal-close]');
      trigger.addEventListener('click', function () {
        modal.classList.add('open');
        document.body.classList.add('modal-open');
      });
      closeButtons.forEach(function (button) {
        button.addEventListener('click', function () {
          modal.classList.remove('open');
          document.body.classList.remove('modal-open');
        });
      });
      modal.addEventListener('click', function (e) {
        if (e.target === modal) {
          modal.classList.remove('open');
          document.body.classList.remove('modal-open');
        }
      });
    }
  });
}
/******/ })()
;